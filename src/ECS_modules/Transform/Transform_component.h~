#pragma once

#include <glm/gtx/euler_angles.hpp>

#include "Core/Transform/Transform_messages.h"
#include "Core/Transform/Transform_system.h"

class TransformComponent {
public:
    TransformComponent(EntityManager& entityManager, glm::vec3 position, glm::vec3 eulerRotation, glm::vec3 scale);
    TransformComponent(EntityManager& entityManager, glm::vec3 position, glm::quat quaternionRotation, glm::vec3 scale);

    inline void setRotation(glm::vec3 eulerRotation) {
        this->eulerRotation = eulerRotation;
        quaternionDirty = true;
    }
    inline void setRotation(glm::quat quaternionRotation) {
        this->quaternionRotation = quaternionRotation;
        eulerDirty = true;
    }

    inline void setPosition(glm::vec3 position) {this->position = position;}
    inline void setScale(glm::vec3 scale) {this->scale = scale;}

    inline glm::vec3 getEulerRotation() {
        if (!eulerDirty)
            return eulerRotation;
        else {
            eulerRotation = glm::eulerAngles(quaternionRotation);
            eulerDirty = false;
            return eulerRotation;
        }
    }
    inline glm::quat getQuaternionRotation() {
        if (!quaternionDirty)
            return quaternionRotation;
        else {
            quaternionRotation  = glm::yawPitchRoll(eulerRotation.y, eulerRotation.x, eulerRotation.z);
            quaternionDirty = false;
            return quaternionRotation;
        }
    }

    inline glm::vec3 getPosition() const {return position;}
    inline glm::vec3 getScale() const {return scale;}

private:
    EntityManager& entityManager;
    TransformSystem& transformSystem;
    ComponentManager<TransformComponent>& transformComponentManager;

    bool eulerDirty = false;
    bool quaternionDirty = false;

    glm::vec3 position;
    glm::vec3 eulerRotation;
    glm::quat quaternionRotation;
    glm::vec3 scale;
    glm::mat4 modelMatrix;

    void updateModelMatrix();
};